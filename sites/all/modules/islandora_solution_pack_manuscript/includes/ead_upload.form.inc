<?php

/**
 * @file
 * Handles the uploading of a EAD file.
 */

/**
 * Defines a file upload form for uploading the EAD document.
 *
 * @param array $form
 *   The drupal form.
 * @param array $form_state
 *   The drupal form state.
 *
 * @return array
 *   The drupal form definition.
 */
function islandora_manuscript_ead_upload_form(array $form, array &$form_state) {
  $upload_size = min((int) ini_get('post_max_size'), (int) ini_get('upload_max_filesize'));
  $extensions = array('xml');
  return array(
    'file' => array(
      '#title' => t('EAD (Encoded Archival Description)'),
      '#type' => 'managed_file',
      '#required' => TRUE,
      '#description' => t('Select xml file to upload.<br/>Files must be less than <strong>@size MB.</strong><br/>Allowed file types: <strong>@ext.</strong>', array('@size' => $upload_size, '@ext' => $extensions[0])),
      '#default_value' => isset($form_state['values']['file']) ? $form_state['values']['file'] : NULL,
      '#upload_location' => 'temporary://',
      '#upload_validators' => array(
        'file_validate_extensions' => $extensions,
        // Assume its specified in MB.
        'file_validate_size' => array($upload_size * 1024 * 1024),
      ),
    ),
  );
}

/**
 * Validates that the uploaded file is actually an EAD file.
 *
 * @param array $form
 *   The drupal form.
 * @param array $form_state
 *   The drupal form state.
 */
function islandora_manuscript_ead_upload_form_validate(array $form, array &$form_state) {
  module_load_include('inc', 'islandora_manuscript', 'includes/utilities');
  $data_path = drupal_get_path('module', 'islandora_manuscript') . '/data';
  $file = file_load($form_state['values']['file']);
  if ($file) {
    $doc = new DOMDocument();
    if (!@$doc->load($file->uri)) {
      form_set_error('file', t('The uploaded file could not be parsed as XML.'));
      return;
    }
    $doc = islandora_manuscript_ead_dtd_to_xsd($doc);
    // We ignore errors generated by this call as we don't want to display
    // them to the end user.
    if ($doc == FALSE || !@$doc->schemaValidate("{$data_path}/schemas/ead.xsd")) {
      form_set_error('file', t('The given XML file is not a valid EAD document.'));
    }
    else {
      // Make sure the transform is persisted to the file if it was valid.
      $doc->save($file->uri);
    }
  }
}

/**
 * Submit handler, adds uploaded file to ingest object.
 *
 * @param array $form
 *   The drupal form.
 * @param array $form_state
 *   The drupal form state.
 */
function islandora_manuscript_ead_upload_form_submit(array $form, array &$form_state) {
  $object = islandora_ingest_form_get_object($form_state);
  $file = file_load($form_state['values']['file']);
  islandora_manuscript_ingest_ead_datastream($object, $file);
  islandora_manuscript_set_object_label_from_ead($object, $file);
  islandora_manuscript_crosswalk_ead_to_dc($object, $file);
}

/**
 * Ingest the given file as the given objects EAD datastream.
 *
 * @param AbstractObject $object
 *   The object which will ingest the given EAD file.
 * @param object $file
 *   A drupal file containing the EAD content to be ingested as a datastream.
 */
function islandora_manuscript_ingest_ead_datastream(AbstractObject $object, $file) {
  // Create / Update the EAD datastream with the uploaded file.
  if (empty($object['EAD'])) {
    $ds = $object->constructDatastream('EAD', 'M');
    $object->ingestDatastream($ds);
  }
  else {
    $ds = $object['EAD'];
  }
  $path = drupal_realpath($file->uri);
  $ds->setContentFromFile($path, FALSE);
  $ds->label = $file->filename;
  $ds->mimetype = 'text/xml';
}

/**
 * Sets the object's label from the given EAD documents title element.
 *
 * @param AbstractObject $object
 *   The object whose label will be set.
 *
 * @param object $file
 *   The EAD document from which the title will be fetched.
 */
function islandora_manuscript_set_object_label_from_ead(AbstractObject $object, $file) {
  $ead = simplexml_load_file($file->uri);
  $ead->registerXPathNamespace('ead', 'urn:isbn:1-931666-22-9');
  $results = $ead->xpath('/ead:ead/ead:eadheader/ead:filedesc/ead:titlestmt/ead:titleproper');
  if (!empty($results)) {
    // Just use the first one.
    $object->label = (string) $results[0];
  }
  else {
    // No title, use the filename.
    $object->label = $file->filename;
  }
}

/**
 * Sets the object's DC from the given EAD document.
 *
 * We use this as we don't define an XML form for the EAD document.
 *
 * @param AbstractObject $object
 *   The object whose DC will be set.
 *
 * @param object $file
 *   The EAD document from which the DC will be generated.
 */
function islandora_manuscript_crosswalk_ead_to_dc(AbstractObject $object, $file) {
  module_load_include('inc', 'islandora_manuscript', 'includes/utilities');
  $ead = new DOMDocument();
  $ead->load($file->uri);
  $dc = islandora_manuscript_ead_to_dc($ead);
  if ($dc) {
    if (empty($object['DC'])) {
      $ds = $object->constructDatastream('DC', 'X');
      $object->ingestDatastream($ds);
    }
    else {
      $ds = $object['DC'];
    }
    $ds->content = $dc->saveXML();
    $ds->label = 'Dublin Core Record for this object';
    $ds->mimetype = 'text/xml';
  }
}
