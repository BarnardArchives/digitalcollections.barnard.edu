<?php

/**
 * @file
 * Islandora Compound Object Solution Pack
 * Enables parent-child relationships between objects with navigation features.
 *
 * Hook implementations and general functions.
 */

define('ISLANDORA_COMPOUND_OBJECT_CMODEL', 'islandora:compoundCModel');

const ISLANDORA_COMPOUND_OBJECT_LEGACY_BACKEND = 'islandora_compound_object_legacy_sparql';

/**
 * Implements hook_menu().
 */
function islandora_compound_object_menu() {
  $items = array();
  $items['admin/islandora/solution_pack_config/compound_object'] = array(
    'title' => 'Compound Object Solution Pack',
    'description' => 'Customize behavior.',
    'access arguments' => array('administer compound relationships'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_compound_object_admin_form'),
    'file' => 'includes/admin.form.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['islandora/object/%islandora_object/manage/compound'] = array(
    'title' => 'Compound',
    'page callback' => 'islandora_compound_object_manage',
    'page arguments' => array(2),
    'access callback' => 'islandora_compound_object_access',
    'access arguments' => array(2),
    'file' => 'includes/manage.form.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['islandora_compound_object/autocomplete/child'] = array(
    'page callback' => 'islandora_compound_object_autocomplete',
    'page arguments' => array(3, FALSE),
    'access arguments' => array('administer compound relationships'),
    'type' => MENU_CALLBACK,
  );
  $items['islandora_compound_object/autocomplete/parent'] = array(
    'page callback' => 'islandora_compound_object_autocomplete',
    'page arguments' => array(3, TRUE),
    'access arguments' => array('administer compound relationships'),
    'type' => MENU_CALLBACK,
  );
  $items['islandora/object/%islandora_object/compound_count'] = array(
    'title' => 'Compound Object Count',
    'weight' => 23,
    'page callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'islandora_compound_object_task_access',
    'access arguments' => array(2),
  );
  $items['islandora/object/%islandora_object/compound_previous'] = array(
    'title' => 'Compound Previous',
    'weight' => 22,
    'page callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'islandora_compound_object_task_access',
    'access arguments' => array(2),
  );
  $items['islandora/object/%islandora_object/compound_next'] = array(
    'title' => 'Compound Next',
    'weight' => 21,
    'page callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'islandora_compound_object_task_access',
    'access arguments' => array(2),
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function islandora_compound_object_permission() {
  return array(
    'administer compound relationships' => array(
      'title' => t('Administer compound object relationships'),
      'description' => t('Add a child to a parent.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function islandora_compound_object_theme($existing, $type, $theme, $path) {
  return array(
    'islandora_compound_prev_next' => array(
      'file' => 'theme/theme.inc',
      'template' => 'theme/islandora-compound-prev-next',
      'pattern' => 'islandora_compound_prev_next__',
      'variables' => array(
        'parent_label' => NULL,
        'parent_url' => NULL,
        'previous_pid' => NULL,
        'next_pid' => NULL,
        'child_count' => NULL,
        'siblings' => NULL,
        'pid' => NULL,
      ),
    ),
    'islandora_compound_object_draggable_table' => array(
      'render element' => 'form',
      'file' => 'theme/theme.inc',
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function islandora_compound_object_block_info() {
  $blocks['compound_navigation'] = array(
    'info' => t('Islandora Compound Object Navigation'),
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'islandora/object/*',
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['compound_jail_display'] = array(
    'info' => t('Islandora Compound Object JAIL Display'),
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'islandora/object/*',
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function islandora_compound_object_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'compound_navigation':
      if (!variable_get('islandora_compound_object_use_jail_view', FALSE)) {
        module_load_include('inc', 'islandora_compound_object', 'includes/blocks');
        $block['subject'] = NULL;
        $block['content'] = islandora_compound_object_navigation_block();
      }
      break;

    case 'compound_jail_display':
      if (variable_get('islandora_compound_object_use_jail_view', FALSE)) {
        module_load_include('inc', 'islandora_compound_object', 'includes/blocks');
        $block['subject'] = NULL;
        $block['content'] = islandora_compound_object_jail_display_block();
      }
      break;
  }
  return $block;
}

/**
 * Implements hook_CMODEL_PID_islandora_object_purged().
 */
function islandora_compound_object_islandora_compoundcmodel_islandora_object_purged($pid) {
  $parts = islandora_compound_object_get_parts($pid);
  $rels_predicate = variable_get('islandora_compound_object_relationship', 'isConstituentOf');
  foreach ($parts as $part) {
    $escaped_pid = str_replace(':', '_', $pid);
    $child_object = islandora_object_load($part);
    $child_object->relationships->remove(FEDORA_RELS_EXT_URI, $rels_predicate, $pid);
    $child_object->relationships->remove(ISLANDORA_RELS_EXT_URI, "isSequenceNumberOf$escaped_pid");
  }
}

/**
 * Implements hook_islandora_required_objects().
 */
function islandora_compound_object_islandora_required_objects(IslandoraTuque $connection) {
  $module_path = drupal_get_path('module', 'islandora_compound_object');

  $compound_content_model = $connection->repository->constructObject(ISLANDORA_COMPOUND_OBJECT_CMODEL);
  $compound_content_model->owner = 'fedoraAdmin';
  $compound_content_model->label = 'Islandora Compound Object Content Model';
  $compound_content_model->models = 'fedora-system:ContentModel-3.0';

  $datastream = $compound_content_model->constructDatastream('DS-COMPOSITE-MODEL', 'X');
  $datastream->label = 'DS-COMPOSITE-MODEL';
  $datastream->mimetype = 'application/xml';
  $datastream->setContentFromFile("$module_path/xml/islandora_compound_ds_composite_model.xml", FALSE);
  $compound_content_model->ingestDatastream($datastream);

  $compound_collection = $connection->repository->constructObject('islandora:compound_collection');
  $compound_collection->owner = 'fedoraAdmin';
  $compound_collection->label = 'Compound Collection';
  $compound_collection->models = 'islandora:collectionCModel';
  $compound_collection->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:root');

  $datastream = $compound_collection->constructDatastream('COLLECTION_POLICY', 'X');
  $datastream->label = 'Collection policy';
  $datastream->mimetype = 'application/xml';
  $datastream->setContentFromFile("$module_path/xml/islandora_compound_collection_policy.xml", FALSE);
  $compound_collection->ingestDatastream($datastream);

  $datastream = $compound_collection->constructDatastream('TN', 'M');
  $datastream->label = 'Thumbnail';
  $datastream->mimetype = 'image/png';
  $datastream->setContentFromFile("$module_path/images/folder.png", FALSE);
  $compound_collection->ingestDatastream($datastream);

  return array(
    'islandora_compound_object' => array(
      'title' => 'Islandora compound object',
      'objects' => array(
        $compound_content_model,
        $compound_collection,
      ),
    ),
  );
}

/**
 * Implements hook_xml_form_builder_forms().
 */
function islandora_compound_object_xml_form_builder_forms() {
  $module_path = drupal_get_path('module', 'islandora_compound_object');
  return array(
    'Compound Object MODS form' => array(
      'form_file' => "$module_path/xml/islandora_compound_form_mods.xml",
    ),
  );
}

/**
 * Implements hook_xml_form_builder_form_associations().
 */
function islandora_compound_object_xml_form_builder_form_associations() {
  return array(
    'islandora_compound_mods_form' => array(
      'content_model' => ISLANDORA_COMPOUND_OBJECT_CMODEL,
      'form_name' => 'Compound Object MODS form',
      'dsid' => 'MODS',
      'title_field' => array('titleInfo', 'title'),
      'transform' => 'mods_to_dc.xsl',
      'template' => FALSE,
    ),
  );
}

/**
 * Implements hook_islandora_cmodel_islandora_view_object().
 */
function islandora_compound_object_islandora_compoundCModel_islandora_view_object($object) {
  // Get view of first child.
  $children = islandora_compound_object_get_parts($object->id);
  if (!empty($children)) {
    $first_child_id = reset($children);
    if ($first_child_id != $object->id) {
      $first_child = islandora_object_load($first_child_id);
      drupal_set_title($first_child->label);
      return islandora_view_object($first_child);
    }
  }
}

/**
 * Access callback for compound object management.
 */
function islandora_compound_object_access(AbstractObject $object) {
  return islandora_object_access('administer compound relationships', $object);
}

/**
 * Implements hook_CMODEL_islandora_derivative().
 */
function islandora_compound_object_islandora_compoundCModel_islandora_derivative(AbstractObject $object = NULL, $ds_modified_params = array()) {
  $module_path = drupal_get_path('module', 'islandora_compound_object');
  $derivatives = array();
  if (variable_get('islandora_compound_object_tn_deriv_hooks', FALSE)) {
    $derivatives[] = array(
      'source_dsid' => NULL,
      'destination_dsid' => 'TN',
      'function' => array('islandora_compound_object_create_thumbnail'),
      'file' => "$module_path/includes/derivatives.inc",
    );
  }

  return $derivatives;

}

/**
 * Implements hook_islandora_derivative().
 */
function islandora_compound_object_islandora_derivative(AbstractObject $object = NULL, $ds_modified_params = array()) {
  $module_path = drupal_get_path('module', 'islandora_compound_object');
  $derivatives = array();
  // Short circuit if feature is disabled.
  if (variable_get('islandora_compound_object_tn_deriv_hooks', FALSE)) {
    $derivatives[] = array(
      'source_dsid' => 'TN',
      'destination_dsid' => NULL,
      'function' => array('islandora_compound_object_create_thumbnail_on_parent'),
      'file' => "$module_path/includes/derivatives.inc",
    );
  }
  return $derivatives;
}

/**
 * Update a parent object's TN by deriving it's first child's TN.
 *
 * Note: This method does not enforce the relationship between
 * parent/child if both are provided. It is left up to the caller
 * to ensure that objects provided have the appropriate relationship.
 *
 * @param AbstractObject $parent
 *   The compound object.
 * @param AbstractObject $child
 *   The child object (optional). Note: Ideally, this would be required.
 *   Keeping it optional for backwards compatibility.
 */
function islandora_compound_object_update_parent_thumbnail(AbstractObject $parent, AbstractObject $child = NULL) {
  module_load_include('inc', 'islandora', 'includes/utilities');

  // Leaving this part in for backwards compatibility. As per doc comment,
  // it would be ideal for the caller to be required to provide both objects.
  if ($child == NULL) {
    $parts = islandora_compound_object_get_parts($parent->id);
    if (!empty($parts)) {
      $child = islandora_object_load($parts[0]);
    }
  }
  if ($child != NULL && !empty($child['TN'])) {
    $mime_detector = new MimeDetect();
    $ext = $mime_detector->getExtension($child['TN']->mimeType);
    // Windows will likely store temp data in a temp directory
    // rather than in memory. Since the colon is forbidden in
    // filenames, replace it with an underscore instead.
    $thumbnail_id = ((islandora_deployed_on_windows()) ? str_replace(':', '_', $child->id) : $child->id);
    $file = drupal_realpath("temporary://{$thumbnail_id}_TN.{$ext}");
    $child['TN']->getContent($file);
    if (empty($parent['TN'])) {
      $ds = $parent->constructDatastream('TN', 'M');
      $ds->setContentFromFile($file, TRUE);
      $ds->label = $child['TN']->label;
      $ds->mimetype = $child['TN']->mimetype;
      $parent->ingestDatastream($ds);
    }
    else {
      // Check the size and then the content for equality.
      // Only set if both are unequal.
      if (($parent['TN']->size != $child['TN']->size) &&
        $parent['TN']->content != $child['TN']->content) {
        // Check label equality before setting label.
        if ($parent['TN']->label != $child['TN']->label) {
          $parent['TN']->label = $child['TN']->label;
        }
        // Check mimetype equality before setting mimetype.
        if ($parent['TN']->mimeType != $child['TN']->mimetype) {
          $parent['TN']->mimetype = $child['TN']->mimetype;
        }
        $parent['TN']->setContentFromFile($file, TRUE);
      }
    }
    file_unmanaged_delete($file);
  }
  // Child doesn't have a thumbnail then we can't set the parents TN either.
  elseif (isset($parent['TN'])) {
    $parent->purgeDatastream('TN');
  }
}

/**
 * Autocomplete callback for child object search.
 *
 * @param string $string
 *   The user supplied string that is being searched for.
 * @param bool $parent
 *   A flag indicating if we are to return objects usable as parents.
 */
function islandora_compound_object_autocomplete($string, $parent = FALSE) {
  $matches = array();
  $islandora_tuque = islandora_get_tuque_connection();
  $compound_enforcement = variable_get('islandora_compound_object_compound_children', TRUE);

  // Build escapes as per:
  // - https://www.w3.org/TR/xmlschema-2/#dt-metac and
  // - https://www.w3.org/TR/xmlschema-2/#dt-cces1
  $meta = array(
    '\\',
    '.',
    '?',
    '*',
    '+',
    '{',
    '}',
    '(',
    ')',
    '[',
    ']',
    '|',
    '-',
    '^',
  );
  $escape_meta = function ($meta) {
    return "\\\\$meta";
  };
  $meta_replacements = drupal_map_assoc($meta, $escape_meta);

  $replacements = array(
    '!compound_model' => '?model',
    '!text' => str_replace(array_keys($meta_replacements), $meta_replacements, $string),
  );
  if ($compound_enforcement && $parent) {
    $compound_model = ISLANDORA_COMPOUND_OBJECT_CMODEL;
    $replacements['!compound_model'] = "<info:fedora/$compound_model>";
  }

  $query = <<<'EOQ'
SELECT DISTINCT ?pid ?title
FROM <#ri>
WHERE {
  ?pid <fedora-model:hasModel> !compound_model ;
       <fedora-model:label> ?title .
  FILTER(regex(?title, "!text", 'i') || regex(str(?pid), "!text", 'i'))
}
LIMIT 10
EOQ;
  $query = format_string($query, $replacements);
  $results = $islandora_tuque->repository->ri->sparqlQuery($query, 'unlimited');

  foreach ($results as $result) {
    $matches[$result['pid']['value']] = t('!title (!pid)', array(
      '!title' => $result['title']['value'],
      '!pid' => $result['pid']['value'],
    ));
  }
  drupal_json_output($matches);
}

/**
 * Implements hook_islandora_basic_collection_get_query_optionals().
 */
function islandora_compound_object_islandora_basic_collection_get_query_optionals($type) {
  if (variable_get('islandora_compound_object_hide_child_objects_ri', TRUE)) {
    if ($type == 'view') {
      return format_string('?object <!uri!pred> ?compound', array(
        '!uri' => FEDORA_RELS_EXT_URI,
        '!pred' => variable_get('islandora_compound_object_relationship', 'isConstituentOf'),
      ));
    }
  }
}

/**
 * Implements hook_islandora_basic_collection_get_query_filters().
 */
function islandora_compound_object_islandora_basic_collection_get_query_filters($type) {
  if (variable_get('islandora_compound_object_hide_child_objects_ri', TRUE)) {
    if ($type == 'view') {
      return '!bound(?compound)';
    }
  }
}

/**
 * Implements hook_islandora_solr_query().
 */
function islandora_compound_object_islandora_solr_query($islandora_solr_query) {
  if (variable_get('islandora_compound_object_hide_child_objects_solr', TRUE)) {
    $fq = variable_get('islandora_compound_object_solr_fq', '-RELS_EXT_isConstituentOf_uri_mt:[* TO *]');
    if (!empty($fq)) {
      $islandora_solr_query->solrParams['fq'][] = $fq;
    }
  }
}

/**
 * Return an array of pids that are part of a compound object.
 */
function islandora_compound_object_get_parts($pid, $ret_title = FALSE) {

  $backend = variable_get('islandora_compound_object_query_backend', ISLANDORA_COMPOUND_OBJECT_LEGACY_BACKEND);
  $backends = module_invoke_all('islandora_compound_object_query_backends');

  if (!isset($backends[$backend])) {
    $backend = ISLANDORA_COMPOUND_OBJECT_LEGACY_BACKEND;
  }

  if (isset($backends[$backend]['file'])) {
    require_once $backends[$backend]['file'];
  }

  $results = call_user_func($backends[$backend]['callable'], $pid);

  if ($ret_title) {
    $objects = $results;
  }
  else {
    $objects = array();
    foreach ($results as $result) {
      $objects[] = $result['pid'];
    }
  }

  return $objects;
}

/**
 * Access callback for tabs that aren't tabs.
 *
 * @param AbstractObject $object
 *   An AbstractObject representing a Fedora object.
 *
 * @return bool
 *   TRUE if the user has access, FALSE otherwise.
 */
function islandora_compound_object_task_access(AbstractObject $object) {
  $rels_predicate = variable_get('islandora_compound_object_relationship', 'isConstituentOf');
  $part_of = $object->relationships->get(FEDORA_RELS_EXT_URI, $rels_predicate);
  if (variable_get('islandora_compound_object_use_jail_view', FALSE) && islandora_object_access(ISLANDORA_VIEW_OBJECTS, $object) &&
    ((in_array(ISLANDORA_COMPOUND_OBJECT_CMODEL, $object->models) && islandora_compound_object_children_exist($object)) || !empty($part_of))) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Helper to see if a compound has children on it.
 *
 * @param AbstractObject $object
 *   An AbstractObject representing an object within Fedora.
 *
 * @return bool
 *   TRUE if the object has compound children, FALSE otherwise.
 */
function islandora_compound_object_children_exist(AbstractObject $object) {
  $rels_predicate = variable_get('islandora_compound_object_relationship', 'isConstituentOf');
  $query = <<<EOQ
PREFIX islandora-rels-ext: <http://islandora.ca/ontology/relsext#>
SELECT ?object
FROM <#ri>
WHERE {
  ?object <fedora-model:label> ?title ;
          <fedora-rels-ext:$rels_predicate> <info:fedora/{$object->id}>
}
EOQ;
  return $object->repository->ri->countQuery($query, 'sparql') > 0;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function islandora_compound_object_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if (variable_get('islandora_compound_object_use_jail_view', FALSE)) {
    $valid_paths = module_invoke_all('islandora_compound_object_management_control_paths');
    if (strpos($root_path, 'islandora/object/%') === 0) {
      $compound_object = menu_get_object('islandora_object', 2);
      $compound_info = islandora_compound_object_retrieve_compound_info($compound_object, TRUE);
      if ($compound_info) {
        drupal_set_title(t('@parent - @child', array(
          '@parent' => $compound_info['parent_label'],
          '@child' => $compound_info['label'],
        )), PASS_THROUGH);
      }
      if (isset($data['tabs'][0]['output'])) {
        $query_params = drupal_get_query_parameters();
        foreach ($data['tabs'][0]['output'] as $key => &$tab) {
          if ($tab['#link']['path'] == 'islandora/object/%/compound_count') {
            if (in_array($root_path, $valid_paths) && !empty($compound_info)) {
              $tab['#theme'] = 'html_tag';
              $tab['#tag'] = 'span';
              $tab['#attributes'] = array(
                'id' => 'islandora-compound-sequence-position',
              );
              $tab['#value'] = t('@seq of @total', array(
                '@seq' => $compound_info['sequence'],
                '@total' => $compound_info['child_count'],
              ));
            }
            else {
              unset($data['tabs'][0]['output'][$key]);
            }
          }
          elseif ($tab['#link']['path'] == 'islandora/object/%/compound_previous') {
            if (in_array($root_path, $valid_paths) && !empty($compound_info['previous_pid'])) {
              $tab['#theme'] = 'link';
              $tab['#text'] = t('Previous');
              $tab['#path'] = "islandora/object/{$compound_info['previous_pid']}";
              $tab['#options'] = array(
                'attributes' => array(
                  'id' => 'islandora-compound-previous-link',
                ),
                'html' => FALSE,
                'query' => $query_params,
              );
            }
            else {
              unset($data['tabs'][0]['output'][$key]);
            }
          }
          elseif ($tab['#link']['path'] == 'islandora/object/%/compound_next') {
            if (in_array($root_path, $valid_paths) && !empty($compound_info['next_pid'])) {
              $tab['#theme'] = 'link';
              $tab['#text'] = t('Next');
              $tab['#path'] = "islandora/object/{$compound_info['next_pid']}";
              $tab['#options'] = array(
                'attributes' => array(
                  'id' => 'islandora-compound-next-link',
                ),
                'html' => FALSE,
                'query' => $query_params,
              );
            }
            else {
              unset($data['tabs'][0]['output'][$key]);
            }
          }
        }
      }
    }
  }
}

/**
 * Helper function to retrieve relevant information about the compound.
 *
 * @param AbstractObject $object
 *   An AbstractObject representing an object within Fedora.
 * @param bool $allow_parent
 *   (Optional) If this is set to true, then this function will return
 *   information about the compound if the passed in object is either
 *   a parent or a child, otherwise it will return an empty array.
 *
 * @return array
 *   An array describing the compound containing:
 *   -parent_label: A string holding the parent label of the compound.
 *   -parent_pid: A string holding the pid of the root compound.
 *   -parent_url: A string containing the URL to the manage link for the root
 *   compound, bool FALSE if the current user does not have access.
 *   -previous_pid: A string with the pid of the previous pid in the sequence,
 *   an empty string if one does not exist.
 *   -next_pid: A string with the pid of the next pid in the sequence, an empty
 *   string if one does not exist.
 *   -current_pid: Either the PID of the object passed in, or the first child
 *   if the object passed in is the parent.
 *   -child_count: An integer of the number of children the object has.
 *   -siblings: An array containing the siblings of the compound.
 *   -siblings_detailed: An array containing the details of sibling objects.
 *   -pid: A string that is the pid of the current object we are on.
 *   -label: A string containing the label of the object.
 *   -sequence: An integer that is the sequence number of the current object.
 *   Or an empty array is the object is the parent of a compound and
 *   $allow_parent is false.
 */
function islandora_compound_object_retrieve_compound_info(AbstractObject $object, $allow_parent = FALSE) {
  $rels_predicate = variable_get('islandora_compound_object_relationship', 'isConstituentOf');
  $part_of = $object->relationships->get(FEDORA_RELS_EXT_URI, $rels_predicate);
  $info = array();

  // This object is the child of a compound object.
  if (!empty($part_of)) {
    // XXX: Handle the case where we are a member of multiple compounds?
    // For now just grab the last value in the array.
    $part = array_pop($part_of);
    $parent_pid = $part['object']['value'];
    $parent = islandora_object_load($parent_pid);
  }
  // Assume this object is the parent compound object.
  else {
    if (!$allow_parent) {
      return array();
    }

    $parent_pid = $object->id;
    $parent = $object;
  }

  $siblings_detailed = islandora_compound_object_get_parts($parent_pid, TRUE);
  if (!empty($siblings_detailed)) {
    $siblings = array_keys($siblings_detailed);
    $current_key = ($parent === $object) ? 0 : array_search($object->id, $siblings);
    $previous_pid = (isset($siblings[$current_key - 1])) ? $siblings[$current_key - 1] : '';
    $next_pid = (isset($siblings[$current_key + 1])) ? $siblings[$current_key + 1] : '';

    // Check if perms to show link for parent manage.
    if (islandora_object_manage_access_callback(array(
      ISLANDORA_METADATA_EDIT, ISLANDORA_MANAGE_PROPERTIES, ISLANDORA_ADD_DS), $parent)) {
      $parent_url = 'islandora/object/' . $parent_pid . '/manage';
    }
    else {
      $parent_url = FALSE;
    }

    $info = array(
      'parent_label' => $parent->label,
      'parent_pid' => $parent_pid,
      'parent_url' => $parent_url,
      'previous_pid' => $previous_pid,
      'next_pid' => $next_pid,
      'current_pid' => $siblings[$current_key],
      'child_count' => count($siblings),
      'siblings' => $siblings,
      'siblings_detailed' => $siblings_detailed,
      'pid' => $object->id,
      'label' => $object->label,
      'sequence' => $current_key + 1,
    );
  }
  return $info;
}

/**
 * Implements hook_islandora_compound_object_management_control_paths().
 */
function islandora_compound_object_islandora_compound_object_management_control_paths() {
  return array(
    'islandora/object/%',
    'islandora/object/%/view',
  );
}

/**
 * Implements hook_islandora_get_breadcrumb_query_predicates().
 */
function islandora_compound_object_islandora_get_breadcrumb_query_predicates(AbstractObject $object) {
  if (variable_get('islandora_compound_object_show_compound_parents_in_breadcrumbs', FALSE)) {
    return array(
      format_string('fedora-rels-ext:!compound_rels', array('!compound_rels' => variable_get('islandora_compound_object_relationship', 'isConstituentOf'))),
    );
  }
}

/**
 * Implements hook_islandora_compound_object_query_backends().
 */
function islandora_compound_object_islandora_compound_object_query_backends() {
  $module_path = drupal_get_path('module', 'islandora_compound_object');

  return array(
    ISLANDORA_COMPOUND_OBJECT_LEGACY_BACKEND => array(
      'title' => t('(Default) Legacy SPARQL - Does a SPARQL query followed by an access check.'),
      'callable' => 'islandora_compound_object_legacy_query_sparql',
      'file' => "$module_path/includes/backends.inc",
    ),
    'islandora_basic_collection_sparql_query_backend' => array(
      'title' => t('SPARQL - Does a SPARQL query with filters. Generally faster than the default option.'),
      'callable' => 'islandora_compound_object_query_sparql',
      'file' => "$module_path/includes/backends.inc",
    ),
  );
}
